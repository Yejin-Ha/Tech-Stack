* 작업 단계

1. mysql 설정
    - oracle db 직접
    - 

2. flask 설정

    1+2 = 서비스 로직 구축이 최종 완결판
        - 미션으로 해 보셔요~~
        : emp table을 사용했던 기존 소스를 재사용
        : github에 업로드 
        : aws ec2 인스턴스에 배포 


3. ELK 구축 
    - 명령어 정리 해서 text 배포
    - 1:1 Q & A 가능


====================

[1] RDS 구축
    1. mysql 생성

    2. 퍼블릭 접속 가능하게 수정
    3. TCP 즉 인터넷 상에서 client와 server가 통신하는 규칙의 port인 3306을 등록
    4. DBeaver 에 mysql 접속 설정
        endpoint, port, id, pw로 접속

    5. playdata라는 database 생성
        - table 생성 및 데이터 insert, commit


[2] flask db연동 코드 재사용
    1. 로컬 시스템 오라클 접속을 aws 원격 시스템 활용으로 코드 수정 
    2. 직접 수행 해 보기 

[3] AWS EC2에 flask 실행 환경 구축(서비스 배포)
    1. end user들이 인터넷상에서 aws 서버에 접속하고 flask가 서비스 하게 되는 구조  

    2. 작업 단계의 process
        aws에 os
        os에 python 실행 환경 구축
        flask library 설정
        개발한 소스를 aws의 해당 server에 배포
        실행
        end user인 client 가 브라우저로 접속 및 서비스 즉 요청/응답 수행 가능 

    3. 실제 aws에 셋팅작업
        ...
        1. 작업 1 : 
        key를 로컬 시스템에 다운로드
            - 권한 부여
            - linux에선 명령어 한줄로 권한 부여
            - window에선 수작업    
                - 상속 관계 무효화 후 일부 제거 
            - cmd를 admin으로 실행 
                -> key가 다운로드 된 경로로 이동 
                    -> 연결에서 ssh client의 접속 url 복사
                        -> window cmd 창에에서 aws 접속 성공 
                            -> aws에 앱 배포


        2. aws에 앱 배포
            1단계 : 개발된 소스를 github에 업로드 해 놓은 상태
                    (실무형..)
            2단계 : github로 부터 서비스 소스를 aws에 다운로드 
                linux에서 외부 원격 파일 다운로드 방식
                $wget https://raw.githubusercontent.com/ITkim/hello-world/master/app.py 

            3단계 : 다운로드 받은 내용 확인
                $ls

            4단계: aws 의 python 실행 환경 확인
                1. python 버전 확인
                    $python3 --version   
                    $pip3 list        
                    Flask등이 없는것을 확인
                    아나콘다가 아닌 순수 python 개발 환경 따라서 필요할 library를 직접 pip로 인스톨
               
                2. FLask 다운로드
                    $pip3 install flask  
                    $pip3 list

            5단계 : 개발된 Flask app 실행
                $python3 app.py
                콘솔창에 ip등 서비스 가능 메세지 출력 
                콘솔창에 출력된 IP는 aws 서비스들 끼리만 소통되는 private ip 
                따라서 외부 브라우저로 일반 end user가 접속 불가 상태
                해결점 : 퍼블릭 IPv4 주소로 서비스 url 확인 



        3. 주의 사항 ***
            github로 부터 파일을 개별 다운로드 받을 경우 주소줄 조절 필수
            왜? 화면 전체 즉 html 파일로 전체가 다운로드 되는 일 발생

            해결책 : 개별 소스의 "Raw" 버튼 클릭후에 raw 형식으로 보면서 
            url 복사해서 wget으로 다운로드       

            command 창에 붙여넣기 할 경우 ctrl+v가 안 될 경우 마우스 오른쪽 버튼 클릭         





              








    



